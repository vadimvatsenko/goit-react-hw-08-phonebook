{"version":3,"file":"static/js/939.d18b9b4f.chunk.js","mappings":"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","sources":["components/loginForm/loginForm.js","redux/contacts/selectors.js","components/form/form.js","components/filter/filter.js","components/contactsList/contactsList.js","pages/Contacts.js"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { logIn } from 'redux/auth/operations';\n\nimport { nanoid } from 'nanoid';\n\nimport InputIcon from '@mui/icons-material/Input';\n\nimport { FormControl, Box, InputLabel, FormHelperText, FormGroup, Button, FilledInput } from '@mui/material';\n\nconst emailInputId = nanoid();\nconst passwordInputId = nanoid();\n\nexport const LoginBoxStyle = {\n      width: '400px',\n      height: 'auto',\n      margin: '0 auto',\n      marginTop: 5,\n      borderRadius: '10px',\n      textAlign: 'center',\n      padding: '15px'\n}\n\nexport default function LoginForm() {\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    dispatch(\n      logIn({\n        email: form.elements.email.value,\n        password: form.elements.password.value,\n      })\n    );\n    form.reset();\n  };\n\n  return (\n \n    <Box sx={LoginBoxStyle}>\n      <InputIcon fontSize=\"large\" color=\"secondary\" />\n      <form onSubmit={handleSubmit}>\n        <FormGroup>\n          <FormControl fullWidth>\n            <InputLabel\n              htmlFor={emailInputId}>\n              Email address\n            </InputLabel>\n            <FilledInput\n              id={emailInputId}\n              aria-describedby=\"my-helper-text\"\n              name='email'\n              required />\n            <FormHelperText\n              id={emailInputId}>\n              We'll never share your email.\n            </FormHelperText>\n          </FormControl>\n          <FormControl fullWidth>\n            <InputLabel\n              htmlFor={passwordInputId}>\n              Password\n            </InputLabel>\n            <FilledInput\n              id={passwordInputId}\n              aria-describedby=\"my-helper-text\"\n              name='password'\n              required />\n            <FormHelperText\n              id={passwordInputId}>\n              We'll never share your password.\n            </FormHelperText>\n          </FormControl>\n          <Button variant=\"contained\" type='submit' fullWidth>Log In</Button>\n        </FormGroup>\n      </form>\n    </Box>\n  );\n};","export const selectContacts = state => state.contacts\nexport const selectFilters = state => state.filter","import { nanoid } from 'nanoid';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio'\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContacts } from 'redux/contacts/operations';\n\nimport { FormControl, Box, InputLabel, FormHelperText, FormGroup, Button, FilledInput, InputAdornment } from '@mui/material';\nimport { LoginBoxStyle } from 'components/loginForm/loginForm';\n\nimport BadgeIcon from '@mui/icons-material/Badge';\nimport PhoneAndroidIcon from '@mui/icons-material/PhoneAndroid';\n\nexport default function Form() {\n    const {items} = useSelector(selectContacts);\n    const dispatch = useDispatch()\n\n    const nameInputId = nanoid();\n    const numberInputId = nanoid();\n\n    const formSubmitHandle = (e) => {\n        e.preventDefault();\n        const form = e.currentTarget;\n        const { name, number } = e.currentTarget;\n        const resultName = name.value.toLowerCase().split(/\\s+/).map(word => word[0].toUpperCase() + word.substring(1)).join(' ');\n        const newContact = {\n        name: resultName,\n        number: number.value\n        };\n\n        const getAllContactsNames = items.map(cont => cont.name);\n            if (getAllContactsNames.includes(resultName)) {\n                form.reset();\n                return Notify.warning(`${resultName} is already in contacts`);\n                } else {\n                dispatch(addContacts(newContact.text));\n                form.reset();\n        }\n       \n        dispatch(addContacts(newContact));\n        form.reset();\n    }\n\n    return (\n        <Box sx={LoginBoxStyle}>\n        <form onSubmit={formSubmitHandle}>\n            <FormGroup>\n                <FormControl required>\n            <InputLabel \n                htmlFor={nameInputId}>\n                    Name\n            </InputLabel>\n            <FilledInput\n                id={nameInputId}\n                type=\"text\"\n                name=\"name\"\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                endAdornment={\n                                <InputAdornment position=\"end\">\n                                    <BadgeIcon\n                                        aria-label=\"nameIcon\"\n                                        edge=\"end\">\n                                    </BadgeIcon>\n                                </InputAdornment>\n                            }\n            />\n            <FormHelperText\n                            id={nameInputId}>\n                            Please enter name.\n                        </FormHelperText>\n            </FormControl>\n            <FormControl required>\n            <InputLabel \n                htmlFor={numberInputId}>\n                    Number\n                    </InputLabel>\n            <FilledInput\n                id={numberInputId}\n                type=\"tel\"\n                name=\"number\"\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                endAdornment={\n                                <InputAdornment position=\"end\">\n                                    <PhoneAndroidIcon\n                                        aria-label=\"phoneIcon\"\n                                        edge=\"end\">\n                                    </PhoneAndroidIcon>\n                                </InputAdornment>\n                            }\n            />\n            </FormControl>\n             <FormHelperText\n                            id={nameInputId}>\n                            Please enter number.\n                        </FormHelperText>\n\n            <Button type=\"submit\" variant=\"contained\">Add contact</Button>\n            </FormGroup>\n        </form>\n        </Box>\n        \n    );\n}\n\n\n\n","//DONE\nimport React from \"react\";\nimport { nanoid } from 'nanoid';\nimport { filterContacts } from \"redux/contacts/filterSlice\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectFilters } from \"redux/contacts/selectors\";\n\nimport {\n    FilledInput,\n    FormGroup, \n    Box,\n    InputLabel,\n    FormHelperText,\n    FormControl,\n    InputAdornment,\n\n    \n} from '@mui/material';\n\nimport ContentPasteSearchIcon from '@mui/icons-material/ContentPasteSearch';\n\nimport { LoginBoxStyle } from 'components/loginForm/loginForm';\n\nconst idForFilter = nanoid();\n\nexport default function Filter() {\n\n    const dispatch = useDispatch();\n    const filter = useSelector(selectFilters);\n\n    const changeFilter = e => {\n        const name = e.target.value.toLowerCase();\n        dispatch(filterContacts(name));\n    }\n\n    return (\n        <Box sx={LoginBoxStyle}>\n        <form>\n            <FormGroup>\n                <FormControl>\n            <InputLabel\n                htmlFor={idForFilter}>\n                Find contact by name\n            </InputLabel>\n            <FilledInput\n                id={idForFilter}\n                type=\"text\"\n                name=\"filter\"\n                onChange={changeFilter}\n                value={filter}\n                endAdornment={\n                                <InputAdornment position=\"end\">\n                                    <ContentPasteSearchIcon\n                                        aria-label=\"userIcon\"\n                                        edge=\"end\"\n                                    >\n                                    </ContentPasteSearchIcon>\n                                </InputAdornment>\n                            } \n            />\n            <FormHelperText\n                id={idForFilter}>Search contacts.\n            </FormHelperText>\n            </FormControl>\n            </FormGroup>\n                        \n        </form>\n        </Box>\n    );\n}\n\n\n\n","import PropTypes from 'prop-types';\nimport React from \"react\";\nimport { useEffect } from \"react\";\nimport { fetchContatcts } from \"redux/contacts/operations\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectContacts, selectFilters } from \"redux/contacts/selectors\";\nimport { deleteContacts } from \"redux/contacts/operations\";\n\nimport { Box, Button, Container, Typography, List } from '@mui/material';\nimport Skeleton from '@mui/material/Skeleton';\n\nexport default function ContactsList({ title, children }) {\n    const dispatch = useDispatch()\n    const { items, isLoading, error } = useSelector(selectContacts);\n    const filter = useSelector(selectFilters);\n    const filterContacts = items.filter(item => item.name.toLowerCase().includes(filter.toLowerCase())) \n\n    useEffect(() => {\n    dispatch(fetchContatcts());\n    }, [dispatch]);\n\n        \n    if (items.length < 1 ) {\n        return (\n            <Container>\n                <Typography variant=\"h5\"\n                    align='center'\n                    sx={{ color: 'primary.main' }}>\n                    Missing contacts\n                </Typography>\n            </Container>\n        );\n    }\n                \n    return (\n        <Container>\n            {isLoading && <Container>\n                <Box sx={{ width: 300, margin: '0 auto' }}>\n                    <Skeleton />\n                    <Skeleton animation=\"pulse\" />\n                    <Skeleton animation={false} />\n                </Box>\n            </Container>}\n            {error ? (<p>{error}</p>) :\n                (<Container>\n                    <div>\n                        <Typography variant=\"h1\" component=\"h2\">{title}</Typography>\n                        {children}\n                    </div>\n                    <div>\n                        <List sx={{ width: '100%', maxWidth: 360, bgcolor: 'background.paper' }}>\n                            {filterContacts.map(({ id, name, number }) => (\n                                <li key={id}>\n                                    <p>{name}</p>\n                                    <p>{number}</p>\n                                    <Button variant=\"contained\"\n                                        type='button'\n                                        onClick={() => { dispatch(deleteContacts(id)) }}>\n                                        Remove\n                                    </Button>\n                                </li>\n                            ))}\n                        </List>\n                    </div>\n                </Container>\n                )}\n        </Container>\n    );\n};\n\nContactsList.protoType = {\n    title: PropTypes.string.isRequired,\n}\n\n","import Form from \"components/form/form\";\nimport Filter from \"components/filter/filter\";\nimport ContactsList from \"components/contactsList/contactsList\";\n\n\nexport default function Contacts() {\n    return (\n        <>\n            <Form />\n            <Filter />\n            <ContactsList/>\n        </>\n        \n        \n    );\n}"],"names":["emailInputId","nanoid","passwordInputId","LoginBoxStyle","width","height","margin","marginTop","borderRadius","textAlign","padding","LoginForm","dispatch","useDispatch","sx","fontSize","color","onSubmit","e","preventDefault","form","currentTarget","logIn","email","elements","value","password","reset","fullWidth","htmlFor","id","name","required","variant","type","selectContacts","state","contacts","selectFilters","filter","Form","items","useSelector","nameInputId","numberInputId","Box","number","resultName","toLowerCase","split","map","word","toUpperCase","substring","join","newContact","cont","includes","Notify","addContacts","text","FormGroup","FormControl","InputLabel","FilledInput","pattern","title","endAdornment","InputAdornment","position","Badge","edge","FormHelperText","PhoneAndroid","Button","idForFilter","Filter","onChange","target","filterContacts","ContentPasteSearch","ContactsList","children","isLoading","error","item","useEffect","fetchContatcts","length","Container","Typography","align","Skeleton","animation","component","List","maxWidth","bgcolor","onClick","deleteContacts","Contacts","protoType","PropTypes"],"sourceRoot":""}